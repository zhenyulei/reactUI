/**
 * @file
 * @author Zeng Tong
 * Created on 2017-09-07.
 */

'use strict';

const _ = require('lodash');
const Bucket = require('./lib/bucket');
const Client = require('./lib/client');


/**
 * Jss 类型 <br>
 * 代表着 Jingdong Storage Service 客户端 <br>
 */
class Jss {
    /**
     * 创建一个 Jss 客户端实例
     * @public
     * @param {string} endpoint 所要连接的 endpoint 地址
     * @param {string} accessKey 字符串 accessKey
     * @param {string} secretKey 字符串 secretKey
     * @param {boolean} useHttps 是否使用 https
     * @example
     * var jss=new Jss('storage.jd.com','your-accessKey-here','your-secretKey-here',true);
     */
    constructor(endpoint, accessKey, secretKey, useHttps = true) {
        if (!( _.isString(endpoint) && endpoint.trim().length > 0)) {
            throw new Error('endpoint required');
        }
        if (!( _.isString(secretKey) && secretKey.trim().length > 0)) {
            throw new Error('secretKey required');
        }
        if (!( _.isString(accessKey) && accessKey.trim().length > 0)) {
            throw new Error('accessKey required');
        }
        this.endpoint = endpoint || 'storage.jd.com';
        this.accessKey = accessKey;
        this.secretKey = secretKey;
        this.scheme = (useHttps === true) ? 'https' : 'http';
        this.client = new Client(this.scheme, this.endpoint, this.accessKey, this.secretKey);
    }

    /**
     * 新建一个 Bucket 对象<br>
     * 该对象封装了对 Bucket 的操作<br>
     * @public
     * @param {string} bucketName bucket的名字;
     * @returns {Bucket} 新建的 Bucket 对象
     * @example
     * var bucket=jss.bucket('bucket-name');
     */
    bucket(bucketName) {
        return new Bucket(bucketName, this.client);
    }

    /**
     * 列出所有 bucket
     * @public
     * @returns {Promise.<bucket[]>}
     * @example
     * jss.listBucket().then(function (res) {
     *     console.log(res)
     * }).catch(function (err) {
     *     console.log(err)
     * })
     */
    listBucket() {
        var self = this;
        var request = {
            method:'GET',
            uri:'/'
        };
        return self.client.execute(request);
    }
    /**
     * 是否拥有指定名字的 bucket
     * @public
     * @returns {Promise.<boolean>} resolve，拥有则为 true，否则为 false
     * @returns {Promise.<Error>} reject，失败时为错误对象
     * @example
     * jss.listBucket().then(function (res) {
     *     console.log(res)
     * }).catch(function (err) {
     *     console.log(err)
     * })
     */
    hasBucket(name) {
        var self = this;
        if(!( _.isString(name) && name.trim().length > 0)){
            var err=new Error('参数 name 必须为非空字符串');
            return Promise.reject(err);
        }
        return self.listBucket().then(function (res) {
            if(typeof res === 'string'){
                res =JSON.parse(res);
            }
            var bucketList = res.Buckets;
            var hasBucket = false;
            for(var index=0, len=bucketList.length;index<len;index++ ){
                var bucket=bucketList[index];
                if(bucket.Name === name){
                    hasBucket=true;
                    break;
                }
            }
            return hasBucket;
        });
    }

}

module.exports=Jss;
