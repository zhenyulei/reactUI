/**
 * @file
 * @author Zeng Tong
 * Created on 2017-09-18.
 */

'use strict';
const _ = require('lodash');

/**
 * 权限控制类 Access Control List<br>
 * 设置、删除 bucket 的访问权限<br>
 * 被授权人由其 accessKey 标识; 权限分为 `READ` `WRITE` `FULL_CONTROL` 三种; 权限控制粒度为 bucket 层次，不能对单个资源 （Object）权限控制
 * 由于缓存的作用，更新/删除Bucket-Acl操作至多需要1分钟才能全局生效。<br>
 */
class Acl {
    /**
     * 创建一个 Acl 实例
     * @public
     * @param {Bucket} bucket Acl 所属的 Bucket 实例
     * @param {Client} client Client 实例
     */
    constructor(bucket, client) {
        this.bucket = bucket;
        this.client = client;
        this.acl = {
            Bucket: bucket.name,
            CreationDate: null,
            InternetVisible: false,
            AccessControlList: []
        };
    }

    /**
     * 允许任何人可读
     * 此方法仅起配置作用，请调用 set() 方法使配置生效
     * @public
     * @returns {Acl} 返回 Acl 对象
     * @example
     * ```js
     * jss.bucket('pro-test').acl().internetVisible(true).allowAnyoneRead().set().then(function (res) {
     *    console.log(res)
     * }).catch(function (err) {
     *    console.log('出错啦')
     *    console.log(err)
     * })
     * ```
     * */
    allowAnyoneRead() {
        this.grant('*', 'READ');
        return this;
    }

    /**
     * 网络可见<br>
     * 即 Bucket 允许互联网上任何人匿名访问<br>
     * 此方法仅起配置作用，请调用 set() 方法使配置生效
     * @public
     * @param {boolean} isVisible 是否可见，可见则为 true，不可见为 false
     * @returns {Acl} 返回 Acl 对象
     * @example
     * ```js
     * jss.bucket('pro-test').acl().internetVisible(true).allowAnyoneRead().set().then(function (res) {
     *    console.log(res)
     * }).catch(function (err) {
     *    console.log('出错啦')
     *    console.log(err)
     * })
     * ```
     */
    internetVisible(isVisible = true) {
        this.acl.InternetVisible = (isVisible === true) ? true : false;
        return this;
    }

    /**
     * 增加一个权限设置<br>
     * 即 Bucket 允许互联网上任何人匿名访问<br>
     * 此方法仅起配置作用，请调用 set() 方法使配置生效
     * @public
     * @param {string} grantee 被授权人的 accessKey <br>
     * @param {string} permission 被授予的权限<br>
     * @returns {Acl} 返回 Acl 对象
     * @example
     * ```js
     * jss.bucket('pro-test').acl().internetVisible(true).grant('*','READ').set().then(function (res) {
     *    console.log(res)
     * }).catch(function (err) {
     *    console.log('出错啦')
     *    console.log(err)
     * })
     * ```
     */
    grant(grantee, permission) {
        this.acl.AccessControlList.push({
            Grantee: grantee,
            Permission: permission
        });
        return this;
    }

    /**
     * 增加权限设置列表<br>
     * 此方法仅起配置作用，请调用 set() 方法使配置生效
     * @public
     * @param {Object[]} grants 是一个由配置对象组成的数组，每个配置对象构成如下： <br>
     * `{Grantee: 'grantee accesskey here', Permission: 'permission string'}`<br>
     * @returns {Acl} 返回 Acl 对象
     * @example
     * ```js
     * jss.bucket('pro-test').acl().internetVisible(true).grants([{Grantee:'accesskey one',Permission:'READ'},{Grantee:'accesskey two',Permission:'READ'}]).set().then(function (res) {
     *    console.log(res)
     * }).catch(function (err) {
     *    console.log('出错啦')
     *    console.log(err)
     * })
     * ```
     */
    grants(grants) {
        var grantList = [];
        if (_.isArray(grants) && grants.length > 0) {
            grants.forEach(function (grantItem) {
                if (_.isPlainObject(grantItem)) {
                    if (grantItem.Grantee && grantItem.Permission) {
                        grantList.push({
                            Grantee: grantItem.Grantee,
                            Permission: grantItem.Permission
                        });
                    }
                }
            });
        }
        this.acl.AccessControlList = this.acl.AccessControlList.concat(grantList);
        return this;
    }

    /**
     * 配置权限<br>
     * 使配置生效<br>
     * @public
     * @returns {Promise.<Response.body>} resolve，成功时 statusCode 为 200, 返回的Body为空; <br>
     * @returns {Promise.<Error>} reject，失败时为错误对象 <br>
     * @example
     * ```js
     * jss.bucket('pro-test').acl().internetVisible(true).allowAnyoneRead().set().then(function (res) {
     *    console.log(res)
     * }).catch(function (err) {
     *    console.log('出错啦')
     *    console.log(err)
     * })
     * ```
     */
    set() {
        var self = this;
        var bucketName = self.bucket.name;
        var aclStr = JSON.stringify(self.acl);
        if (aclStr.length > 4096) {
            return Promise.reject(new Error('权限列表超出长度限制'));
        }
        var request = {
            method: 'PUT',
            uri: '/' + bucketName + '?acl',
            body: aclStr
        };
        return this.client.execute(request);
    }

    /**
     * 删除权限配置<br>
     * 该 bucket 下所有的权限配置都会被删除，调用此方法后立即执行<br>
     * @public
     * @returns {Promise.<Response.body>} resolve，成功时 statusCode 为 200, 返回的Body为空; <br>
     * @returns {Promise.<Error>} reject，失败时为错误对象 <br>
     * @example
     * ```js
     * jss.bucket('pro-test').acl().delete().then(function (res) {
     *    console.log(res)
     * }).catch(function (err) {
     *    console.log('出错啦')
     *    console.log(err)
     * })
     * ```
     */
    delete() {
        var self = this;
        var bucketName = self.bucket.name;
        var request = {
            method: 'DELETE',
            uri: '/' + bucketName + '?acl',
            body: JSON.stringify(self.acl)
        };
        return this.client.execute(request);
    }

    /**
     * 获取权限配置<br>
     * 获取 bucket 下所有已配置的权限信息<br>
     * @public
     * @returns {Promise.<Response.body>} resolve，成功时 statusCode 为 200, 返回的 Body 格式如下：<br>
     *```js
     *{
     * "Bucket":"pro-test", // Bucket 名称
     * "CreationDate":"Mon, 18 Sep 2017 14:47:59 GMT",   // Bucket 创建时间
     * "AccessControlList":[{"Grantee":"*","Permission":"READ"}],  // 权限控制数组
     * "Referer":null,  // Referer
     * "InternetVisible":true  // 是否网络可见
     *}
     *```
     * <br>
     * @returns {Promise.<Error>} reject，失败时为错误对象 <br>
     * @example
     *
     *```js
     *jss.bucket('pro-test').acl().get().then(function (res) {
     *   console.log(res)
     *}).catch(function (err) {
     *   console.log('出错啦')
     *   console.log(err)
     *})
     *```
     */
    get() {
        var self = this;
        var bucketName = self.bucket.name;
        var request = {
            method: 'GET',
            uri: '/' + bucketName + '?acl'
        };
        return this.client.execute(request);
    }
}

module.exports = Acl;
