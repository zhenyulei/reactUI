/**
 * @file
 * @author Zeng Tong
 * Created on 2017-09-13.
 */

'use strict';

const stream = require('stream');
const _ = require('lodash');
const Promise = require('bluebird');
const fs = Promise.promisifyAll(require('fs'));
const crypto = require('crypto');
const zlib = require('zlib');

function calcMd5(file) {
    return new Promise(function (resolve, reject) {
        const hash = crypto.createHash('md5');
        var input;
        if (typeof file === 'string') {
            input = fs.createReadStream(file);
        } else if (isStream(file)) {
            input = file
        } else if (Buffer.isBuffer(file)) {
            return resolve(hash.update(file).digest('hex'));
        } else {
            return reject('输入参数必须为 Readable Stream 或者合法的路径字符串');
        }

        function cleanup() {
            input.removeListener('data', onData);
            input.removeListener('end', onEnd);
            input.removeListener('error', onError);
        }

        function onData(chunk) {
            if (chunk) {
                hash.update(chunk);
            }
        }

        function onEnd() {
            var md5Value = hash.digest('hex');
            cleanup();
            resolve(md5Value);
        }

        function onError(err) {
            cleanup();
            reject(err);
        }

        input.on('data', onData);
        input.on('end', onEnd);
        input.on('error', onError);
        if(input.isPaused()) {
            input.resume();
        }
    })
}

function calcMd5ForString(value) {
    const hash = crypto.createHash('md5');
    return hash.update(value).digest('hex');
}

function createReadStreamPromise(filename) {
    return new Promise(function (resolve, reject) {
        function onError(err) {
            cleanup();
            reject(err);
        }

        function onReadable() {
            cleanup();
            resolve(stream);
        }

        function cleanup() {
            stream.removeListener('readable', onReadable);
            stream.removeListener('error', onError);
        }

        var stream = fs.createReadStream(filename);
        stream.on('error', onError);
        stream.on('readable', onReadable);
    });
}

function strNotEmpty(str) {
    if (( _.isString(str) && str.trim().length > 0)) {
        return true
    }
    return false;
}


function isStream(obj) {
    return obj instanceof stream.Stream
}

module.exports = {
    calcMd5: calcMd5,
    calcMd5ForString: calcMd5ForString,
    createReadStreamPromise: createReadStreamPromise,
    isStream:isStream,
    strNotEmpty:strNotEmpty
}
